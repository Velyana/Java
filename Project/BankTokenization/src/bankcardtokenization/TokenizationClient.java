/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bankcardtokenization;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.InetAddress;
import java.net.Socket;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.Formatter;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Velyana
 */
public class TokenizationClient extends javax.swing.JFrame {

    /**
     * Creates new form TokenizationClient
     */
    public TokenizationClient() {
        setLocationRelativeTo(null);
        initComponents();
        initializeRMI();
        try {
            Socket socket = new Socket(host, 1099);
        } catch (IOException ex) {
            Logger.getLogger(TokenizationClient.class.getName()).log(Level.SEVERE, null, ex);
        }

        btnDetokenization.setVisible(false);
        btnTokenization.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtName = new javax.swing.JTextField();
        txtPass = new javax.swing.JTextField();
        lblName = new javax.swing.JLabel();
        lblPass = new javax.swing.JLabel();
        btnLog = new javax.swing.JButton();
        lblCardNumber = new javax.swing.JLabel();
        btnTokenization = new javax.swing.JButton();
        txtTokenization = new javax.swing.JTextField();
        lblToken = new javax.swing.JLabel();
        txtDetokenization = new javax.swing.JTextField();
        btnDetokenization = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        txtPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPassActionPerformed(evt);
            }
        });

        lblName.setText("Name");

        lblPass.setText("Password");

        btnLog.setText("Log in");
        btnLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogActionPerformed(evt);
            }
        });

        lblCardNumber.setText("Card Number");

        btnTokenization.setText("Tokenization");
        btnTokenization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTokenizationActionPerformed(evt);
            }
        });

        txtTokenization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTokenizationActionPerformed(evt);
            }
        });

        lblToken.setText("Token");

        txtDetokenization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDetokenizationActionPerformed(evt);
            }
        });

        btnDetokenization.setText("Detokenization");
        btnDetokenization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetokenizationActionPerformed(evt);
            }
        });

        btnSave.setText("Save in file");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnLog, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(lblName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblPass, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblCardNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE))
                                    .addComponent(lblToken, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtPass)
                                    .addComponent(txtName)
                                    .addComponent(txtTokenization)
                                    .addComponent(txtDetokenization, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnTokenization, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDetokenization, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)))))
                .addGap(31, 31, 31))
            .addGroup(layout.createSequentialGroup()
                .addGap(122, 122, 122)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPass, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPass, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnLog, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTokenization, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCardNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDetokenization, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblToken, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDetokenization, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTokenization, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed

    }//GEN-LAST:event_txtNameActionPerformed

    private void txtPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPassActionPerformed
    }//GEN-LAST:event_txtPassActionPerformed

    private void btnLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogActionPerformed
        name = txtName.getText().toString();
        password = txtPass.getText().toString();

        try {
            if (server.isValidUser(name, password)) {
                btnDetokenization.setVisible(true);
                btnTokenization.setVisible(true);
                btnLog.setVisible(false);

                txtPass.setText("");
                btnLog.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this, "Name or password is not correct!");
            }
        } catch (RemoteException ex) {
            Logger.getLogger(TokenizationClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnLogActionPerformed

    private void btnTokenizationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTokenizationActionPerformed
        name = txtName.getText();
        String cardNumber = txtTokenization.getText();
        String token = "";
        Tuple tuple = new Tuple();
        CardDatabase cardDB = new CardDatabase();
        List<Tuple> tuples = cardDB.readFromFile();

        if (!txtTokenization.getText().matches("\\d{16}")) {
            JOptionPane.showMessageDialog(this, "Wrong input");
        } else {

            try {
                if (!server.canRegisterToken(name)) {
                    JOptionPane.showMessageDialog(this, "The user can't register tokens!");
                } else {
                    if (!server.isValid(cardNumber)) {
                        JOptionPane.showMessageDialog(this, "The card number is'n valid!");
                    } else {
                        try {
                            token = server.tokenization(cardNumber);
                            JOptionPane.showMessageDialog(this, "The token is\n" + token);
                            tuple.setBankNumber(cardNumber);
                            tuple.setToken(token);
                            if (tuple.isUnique(tuples, token)) {
                                cardDB.clear();
                                cardDB.add(tuple);

                                //!!!???
                                //cardDB.writeToFile();
                                //JOptionPane.showMessageDialog(this, "The token is saved!");
                            } else {
                                JOptionPane.showMessageDialog(this, "This token already exists! Can't register!");
                            }
                        } catch (RemoteException ex) {
                            Logger.getLogger(TokenizationClient.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            } catch (RemoteException ex) {
                Logger.getLogger(TokenizationClient.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnTokenizationActionPerformed

    private void btnDetokenizationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetokenizationActionPerformed
        name = txtName.getText();
        String token = txtDetokenization.getText();
        String cardNumber = "";

        if (!txtDetokenization.getText().matches("\\d{16}")) {
            JOptionPane.showMessageDialog(this, "Wrong input");
        } else {

            try {
                if (!server.canGetCardNumber(name)) {
                    JOptionPane.showMessageDialog(this, "The user can't get card number!");
                } else {
                    cardNumber = server.getCardNumber(token);
                    JOptionPane.showMessageDialog(this, "The card number is\n" + cardNumber);
                }
            } catch (RemoteException ex) {
                Logger.getLogger(TokenizationClient.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnDetokenizationActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        Tuple tuple = new Tuple();
        CardDatabase cardDB = new CardDatabase();
        List<Tuple> tuples = cardDB.readFromFile();
        File file = new File("Card-Token.txt");
        StringBuilder sb = new StringBuilder();
        Formatter fmt = new Formatter();

        JFrame frame = new JFrame();

        Icon blueIcon = new ImageIcon("yourFile.gif");
        Object stringArray[] = {"Sort by card", "Sord by token"};
        int response = JOptionPane.showOptionDialog(frame, "How to sort cards and tokens?", "Select an Option",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, blueIcon, stringArray,
                stringArray[0]);

        if (response == JOptionPane.NO_OPTION) {
            tuple.sortToken(tuples);
        } else if (response == JOptionPane.YES_OPTION) {
            tuple.sortCard(tuples);
        }

        for (Tuple t : tuples) {
            sb.append(t);
            sb.append("\r\n");
        }

        try (BufferedWriter bw = new BufferedWriter(new FileWriter(file, true))) {
            bw.write(fmt.format("%s\t %s\n", "Card Number", "Token").toString());
            bw.write("\r\n");
            bw.write(sb.toString());
        } catch (IOException ex) {
            System.out.println("Problem while writing to file");
        }

    }//GEN-LAST:event_btnSaveActionPerformed

    private void txtTokenizationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTokenizationActionPerformed

    }//GEN-LAST:event_txtTokenizationActionPerformed

    private void txtDetokenizationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDetokenizationActionPerformed

    }//GEN-LAST:event_txtDetokenizationActionPerformed

    /**
     * @param args the command line arguments
     */
    protected void initializeRMI() {

        try {
            Registry registry = LocateRegistry.getRegistry(host, 1099);
            server = (TokenizationServer) registry.lookup("TokenizationServerImpl");
            System.out.println("Server object " + server + " found");

        } catch (RemoteException ex) {
            Logger.getLogger(TokenizationClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotBoundException ex) {
            Logger.getLogger(TokenizationClient.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TokenizationClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TokenizationClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TokenizationClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TokenizationClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TokenizationClient().setVisible(true);
            }
        });
    }

    private String name;
    private String password;
    private TokenizationServer server;
    private TokenizationServerImpl serverimpl;
    private String host = "";

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDetokenization;
    private javax.swing.JButton btnLog;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnTokenization;
    private javax.swing.JLabel lblCardNumber;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPass;
    private javax.swing.JLabel lblToken;
    private javax.swing.JTextField txtDetokenization;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPass;
    private javax.swing.JTextField txtTokenization;
    // End of variables declaration//GEN-END:variables
}
